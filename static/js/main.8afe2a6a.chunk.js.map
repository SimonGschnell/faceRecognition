{"version":3,"sources":["Components/Single/Navigation/Navigation.js","Components/Single/Logo/Logo.js","Components/Single/UrlImageSearch/UrlImageSearch.js","Components/Single/FaceRecognition/FaceRecognition.js","Components/Single/Rank/Rank.js","Components/Parent/ErrorBound/ErrorBound.js","Components/Parent/Tilt/Tilt.js","Containers/App.js","serviceWorker.js","index.js"],"names":["Navigation","Nav","bg","className","defaultActiveKey","as","Item","Link","href","Logo","props","Image","height","width","src","rounded","UrlImageSearch","event","buttonEvent","InputGroup","Prepend","Button","variant","size","onClick","FormControl","style","backgroundColor","border","placeholder","aria-label","onChange","FaceRecognition","imageURL","divs","boxes","map","box","top","right","left","bottom","position","id","Rank","componentWillMount","state","rank","this","Component","React","Tiltjs","options","max","children","params","app","Clarifai","App","apiKey","detectImage","setState","imageUrl","target","value","createBoundingBoxes","data","regions","outputs","img","document","getElementById","img_height","Number","img_width","region","region_info","bounding_box","top_row","right_col","bottom_row","left_col","push","setBoundingBoxes","sendFaceRecognitionRequest","models","predict","then","response","catch","error","console","log","Container","Row","Col","sm","Tilt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.8afe2a6a.chunk.js","sourcesContent":["import React, { Fragment } from \"react\";\r\nimport { Nav } from \"react-bootstrap\";\r\n\r\nconst Navigation = () => {\r\n  return (\r\n    <Fragment>\r\n      <Nav bg=\"light\" className=\"justify-content-end\" defaultActiveKey=\"/home\" as=\"ul\">\r\n        <Nav.Item as=\"li\">\r\n          <Nav.Link href=\"/home\" className=\"text-white\">Sign Out</Nav.Link>\r\n        </Nav.Item>\r\n      </Nav>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Navigation;","import React, {Fragment} from 'react'\r\nimport { Image} from 'react-bootstrap'\r\n\r\nconst Logo = (props) => {\r\n    return (\r\n        <Fragment>\r\n           \r\n                    <Image height=\"175px\" width=\"175px\" src=\"http://placekitten.com/1000/1000\" rounded />\r\n              \r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default Logo;","import React, { Fragment } from \"react\";\r\nimport { InputGroup, FormControl, Button } from \"react-bootstrap\";\r\n\r\nconst UrlImageSearch = ({ event , buttonEvent}) => {\r\n  return (\r\n    <Fragment>\r\n      <InputGroup className=\"mb-3\">\r\n        <InputGroup.Prepend>\r\n          <Button variant=\"outline-secondary\" size=\"lg\" onClick={buttonEvent}>Detect</Button>\r\n        </InputGroup.Prepend>\r\n        <FormControl\r\n          style={{height:'auto', backgroundColor: 'transparent', border: '1px solid gray'}}\r\n          placeholder=\"ImageURL\"\r\n          aria-label=\"ImageURL\"\r\n          onChange={event}\r\n        />\r\n      </InputGroup>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default UrlImageSearch;\r\n","import React, { Fragment } from \"react\";\r\nimport { Image } from \"react-bootstrap\";\r\nimport \"./FaceRecognition.css\"\r\n\r\nconst FaceRecognition = ({imageURL, boxes}) => {\r\n  const divs = boxes.map((box)=>{\r\n    return (<div className=\"faceBox\" style={{ top: box.top, right: box.right, left: box.left,bottom: box.bottom }} ></div>)\r\n  })\r\n  return (\r\n    <Fragment>\r\n      <div style = {{position: 'relative'}}  >\r\n          <Image id=\"imageBox\" src={imageURL? imageURL: ''} rounded style={{width: '600px', height: 'auto'}} />\r\n          {divs}\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default FaceRecognition;\r\n","import React, {Component, Fragment} from 'react'\r\n\r\nclass Rank extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            rank : 5\r\n        }\r\n    }\r\n    componentWillMount=()=>{\r\n\r\n    }\r\n    render(){\r\n        return(\r\n            <Fragment>\r\n        <h2>Your Rank: #{this.state.rank}</h2>\r\n        <p>Detect more faces on images to increase your <u>Rank!</u></p>\r\n        </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Rank;","import React from 'react'\r\n\r\nclass ErrorBound extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            didCatch :false\r\n        }\r\n    }\r\n\r\n    componentDidCatch=(error)=>{\r\n        this.setState({didCatch : true})\r\n    }\r\n    render(){\r\n        const {didCatch} = this.state;\r\n        return didCatch?<h3>something went wrong</h3>: this.props.children\r\n        \r\n    }\r\n\r\n}\r\n\r\nexport default ErrorBound;","import React, { Fragment } from \"react\";\r\nimport Tilt from 'react-tilt'\r\n\r\nclass Tiltjs extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n  render() {\r\n    return (\r\n      <Tilt\r\n        className=\"Tilt\"\r\n        options={{ max: 30 }}\r\n        style={{ height: 175, width: 175 }}\r\n      >\r\n        <div className=\"Tilt-inner\">\r\n            {this.props.children}\r\n        </div>\r\n      </Tilt>\r\n    );\r\n  }\r\n}\r\nexport default Tiltjs;","import React, { Fragment } from \"react\";\nimport \"./App.css\";\nimport Navigation from \"../Components/Single/Navigation/Navigation\";\nimport Logo from \"../Components/Single/Logo/Logo\";\nimport UrlImageSearch from \"../Components/Single/UrlImageSearch/UrlImageSearch\";\nimport FaceRecognition from \"../Components/Single/FaceRecognition/FaceRecognition\";\nimport Container from \"react-bootstrap/Container\";\nimport Rank from '../Components/Single/Rank/Rank.js'\nimport ErrorBound from \"../Components/Parent/ErrorBound/ErrorBound\";\nimport Tiltjs from \"../Components/Parent/Tilt/Tilt\";\n\nimport { Row, Col } from \"react-bootstrap\";\n\nimport Particles from 'react-particles-js'\nimport Clarifai from 'clarifai'\n\nconst params = {\n  \"particles\": {\n      \"number\": {\n          \"value\": 50\n      },\n      \"size\": {\n          \"value\": 3\n      }\n  },\n  \"interactivity\": {\n      \"events\": {\n          \"onhover\": {\n              \"enable\": true,\n              \"mode\": \"repulse\"\n          }\n      }\n  }\n}\n\nconst app = new Clarifai.App({\n  apiKey: 'd5e832429129456e9d922e5368878fc3'\n})\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      imageUrl: \"\",\n      boxes:[]\n    };\n  }\n\n  detectImage = (event) => {\n    this.setState({ imageUrl: event.target.value });\n  };\n\n  createBoundingBoxes= (data) =>{\n    const regions = data.outputs[0].data.regions;\n    const boxes = []\n    const img = document.getElementById('imageBox');\n    const img_height = Number(img.height);\n    const img_width = Number(img.width);\n    for (let region of regions){\n      const box = {\n        top: region.region_info.bounding_box.top_row * img_height,\n        right: img_width - (region.region_info.bounding_box.right_col * img_width),\n        bottom: img_height - (region.region_info.bounding_box.bottom_row * img_height),\n        left: region.region_info.bounding_box.left_col * img_width\n      }\n\n      boxes.push(box)\n    }\n    return boxes;\n    \n  }\n\n  setBoundingBoxes= (boxes) =>{\n    this.setState({boxes})\n  }\n\n  sendFaceRecognitionRequest = () =>{\n    if(this.state.imageUrl){\n      app.models.predict(\"a403429f2ddf4b49b307e318f00e528b\", this.state.imageUrl)\n      .then( response => {\n          this.setBoundingBoxes(this.createBoundingBoxes(response));\n        }).catch(error => {console.log(error)})\n    }\n    \n  }\n\n  render() {\n    const { imageUrl, boxes } = this.state;\n    return (\n      <Fragment >\n       \n        <Particles className=\"particles\" params={params}/>\n        <Navigation />\n        <Container >\n          <Row className=\"p-4 align-items-center\">\n            <Col sm='auto'>\n              <Tiltjs>\n                <Logo />\n              </Tiltjs>\n            </Col>\n            <Col className=\"text-center \">\n              <Rank/>\n            </Col>\n          </Row>\n          <Row className=\"mt-4\">\n            <Col>\n              <UrlImageSearch event={this.detectImage} buttonEvent={this.sendFaceRecognitionRequest} />\n            </Col>\n          </Row>\n          <Row className=\"justify-content-center\">\n            <Col sm='auto'>\n          <FaceRecognition imageURL={imageUrl} boxes={boxes}/>\n          </Col>\n          </Row>\n        </Container>\n        \n      </Fragment>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}